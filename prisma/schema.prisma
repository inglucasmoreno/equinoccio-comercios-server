// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models list
model Usuarios {
  id                  Int                 @id @default(autoincrement())
  usuario             String              @unique @db.VarChar(30)
  apellido            String              @db.VarChar(50)
  nombre              String              @db.VarChar(50)
  dni                 String              @db.VarChar(30)
  password            String
  email               String              @db.VarChar(50)
  role                String?             @default("ADMIN_ROLE")
  activo              Boolean?            @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  unidadesMedida      UnidadesMedida[]
  // Productos      Productos[]
  marcas              Marcas[]
  productos           Productos[]
  ingresosCreados     Ingresos[]          @relation("usuarioCreador")
  ingresosCompletados Ingresos[]          @relation("usuarioCompletar")
  ingresosProductos   IngresosProductos[]
  ventas              Ventas[]
  ventasProductos     VentasProductos[]
  ventasFormasPago    VentasFormasPago[]
  ventasFacturacion   VentasFacturacion[]
  tiposIngresos       TiposIngresos[]
  tiposGastos         TiposGastos[]
  cajas               Cajas[]
  ingresosCajas       IngresosCajas[]
  gastosCajas         GastosCajas[]
  cajasVentas         CajasVentas[]
  clientes            Clientes[]
  proveedores         Proveedores[]
  configGenerales     ConfigGenerales[]
  reservas            Reservas[]
  reservasProductos   ReservasProductos[]
  ventasReservas      VentasReservas[]
  usuariosPermisos    UsuariosPermisos[]
}

model UsuariosPermisos {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  permiso       String   @db.VarChar(150)
  seccion       String   @db.VarChar(150)
  activo        Boolean? @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  usuario       Usuarios @relation(fields: [usuarioId], references: [id])
}

model UnidadesMedida {
  id            Int         @id @default(autoincrement())
  descripcion   String      @unique @db.VarChar(100)
  activo        Boolean?    @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  creatorUserId Int
  creatorUser   Usuarios    @relation(fields: [creatorUserId], references: [id])
  productos     Productos[]
}

model Marcas {
  id            Int      @id @default(autoincrement())
  descripcion   String   @unique @db.VarChar(150)
  activo        Boolean? @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creatorUserId Int
  creatorUser   Usuarios @relation(fields: [creatorUserId], references: [id])
  // Productos     Productos[]
}

model Productos {
  id                 Int                 @id @default(autoincrement())
  codigo             String?             @default("") @db.VarChar(100)
  descripcion        String              @unique @db.VarChar(150)
  cantidad           Float?              @default(0)
  cantidadMinima     Float?              @default(0)
  alertaStock        Boolean?            @default(false)
  precioCompra       Float?              @default(0)
  precioVenta        Float
  porcentajeGanancia Float?              @default(0)
  balanza            Boolean             @default(false)
  alicuota           Float               @default(21)
  activo             Boolean?            @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  creatorUserId      Int
  creatorUser        Usuarios            @relation(fields: [creatorUserId], references: [id])
  unidadMedidaId     Int
  unidadMedida       UnidadesMedida      @relation(fields: [unidadMedidaId], references: [id])
  // marcaId            Int
  // marca              Marcas         @relation(fields: [marcaId], references: [id])
  ingresosProductos  IngresosProductos[]
  ventasProductos    VentasProductos[]
  reservasProductos  ReservasProductos[]
}

model Ingresos {
  id                  Int                 @id @default(autoincrement())
  fechaIngreso        DateTime?           @default(now())
  nroFactura          String?             @db.VarChar(150)
  comentario          String?             @default("") @db.VarChar(150)
  estado              String?             @default("Pendiente") @db.VarChar(150)
  activo              Boolean?            @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  proveedorId         Int
  creatorUserId       Int
  usuarioCompletadoId Int
  usuarioCompletado   Usuarios?           @relation(fields: [usuarioCompletadoId], references: [id], name: "usuarioCompletar")
  creatorUser         Usuarios            @relation(fields: [creatorUserId], references: [id], name: "usuarioCreador")
  proveedor           Proveedores         @relation(fields: [proveedorId], references: [id])
  ingresosProductos   IngresosProductos[]
}

model IngresosProductos {
  id                  Int       @id @default(autoincrement())
  precioCompra        Float?    @default(0)
  precioVentaAnterior Float?    @default(0)
  precioVentaNuevo    Float?    @default(0)
  porcentajeGanancia  Float?    @default(0)
  actualizarPrecio    Boolean?  @default(false)
  cantidad            Float
  activo              Boolean?  @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  creatorUserId       Int
  creatorUser         Usuarios  @relation(fields: [creatorUserId], references: [id])
  productoId          Int
  producto            Productos @relation(fields: [productoId], references: [id])
  ingresoId           Int
  ingreso             Ingresos  @relation(fields: [ingresoId], references: [id])
}

model Ventas {
  id                    Int                 @id @default(autoincrement())
  fechaVenta            DateTime?           @default(now())
  precioTotal           Float
  precioTotalLimpio     Float
  adicionalCredito      Float
  comprobante           String?             @default("Normal") @db.VarChar(100)
  totalBalanza          Float
  totalNoBalanza        Float
  totalAdelantoReserva  Float               @default(0)
  totalCompletarReserva Float               @default(0)
  activo                Boolean?            @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  cajaId                Int
  creatorUserId         Int
  creatorUser           Usuarios            @relation(fields: [creatorUserId], references: [id])
  caja                  Cajas               @relation(fields: [cajaId], references: [id])
  ventasProductos       VentasProductos[]
  ventasFormasPago      VentasFormasPago[]
  ventasFacturacion     VentasFacturacion[]
  cajasVentas           CajasVentas[]
  ventasReservas        VentasReservas[]
}

model VentasProductos {
  id             Int       @id @default(autoincrement())
  cantidad       Float
  precioTotal    Float
  precioUnitario Float
  activo         Boolean?  @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  creatorUserId  Int
  ventaId        Int
  productoId     Int
  venta          Ventas    @relation(fields: [ventaId], references: [id])
  producto       Productos @relation(fields: [productoId], references: [id])
  creatorUser    Usuarios  @relation(fields: [creatorUserId], references: [id])
}

model VentasFormasPago {
  id             Int      @id @default(autoincrement())
  descripcion    String
  valor          Float
  nroComprobante String?  @default("") @db.VarChar(100)
  activo         Boolean? @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creatorUserId  Int
  ventaId        Int
  venta          Ventas   @relation(fields: [ventaId], references: [id])
  creatorUser    Usuarios @relation(fields: [creatorUserId], references: [id])
}

model VentasFacturacion {
  id              Int      @id @default(autoincrement())
  puntoVenta      Int
  tipoComprobante Int
  nroComprobante  Int
  activo          Boolean? @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorUserId   Int
  ventaId         Int
  venta           Ventas   @relation(fields: [ventaId], references: [id])
  creatorUser     Usuarios @relation(fields: [creatorUserId], references: [id])
}

model TiposIngresos {
  id            Int             @id @default(autoincrement())
  descripcion   String          @unique @db.VarChar(150)
  activo        Boolean?        @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  creatorUserId Int
  creatorUser   Usuarios        @relation(fields: [creatorUserId], references: [id])
  ingresosCajas IngresosCajas[]
}

model TiposGastos {
  id            Int           @id @default(autoincrement())
  descripcion   String        @unique @db.VarChar(150)
  activo        Boolean?      @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creatorUserId Int
  creatorUser   Usuarios      @relation(fields: [creatorUserId], references: [id])
  gastosCajas   GastosCajas[]
}

model Cajas {
  id                      Int             @id @default(autoincrement())
  fechaCaja               DateTime?       @default(now())
  saldoInicial            Float?          @default(0)
  saldoProximaCaja        Float?          @default(0)
  cantidadVentas          Int?            @default(0)
  totalVentas             Float?          @default(0)
  totalFacturado          Float?          @default(0)
  totalBalanza            Float?          @default(0)
  totalNoBalanza          Float?          @default(0)
  totalOtrosIngresos      Float?          @default(0)
  totalOtrosGastos        Float?          @default(0)
  totalCredito            Float?          @default(0)
  totalEfectivo           Float?          @default(0)
  totalDebito             Float?          @default(0)
  totalMercadoPago        Float?          @default(0)
  totalAdicionalCredito   Float?          @default(0)
  totalPostnet            Float?          @default(0)
  totalPedidosYa          Float?          @default(0)
  totalPedidosYaOnline    Float?          @default(0)
  diferencia              Float?          @default(0)
  tesoreria               Float?          @default(0)
  totalEfectivoEnCaja     Float?          @default(0)
  totalEfectivoEnCajaReal Float?          @default(0)
  activo                  Boolean?        @default(true)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  creatorUserId           Int
  creatorUser             Usuarios        @relation(fields: [creatorUserId], references: [id])
  ingresosCajas           IngresosCajas[]
  gastosCajas             GastosCajas[]
  cajasVentas             CajasVentas[]
  ventas                  Ventas[]
}

model IngresosCajas {
  id            Int           @id @default(autoincrement())
  descripcion   String        @db.VarChar(150)
  monto         Float
  activo        Boolean?      @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cajaId        Int
  tipoIngresoId Int
  creatorUserId Int
  tipoIngreso   TiposIngresos @relation(fields: [tipoIngresoId], references: [id])
  caja          Cajas         @relation(fields: [cajaId], references: [id])
  creatorUser   Usuarios      @relation(fields: [creatorUserId], references: [id])
}

model GastosCajas {
  id            Int         @id @default(autoincrement())
  descripcion   String      @db.VarChar(150)
  monto         Float
  activo        Boolean?    @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cajaId        Int
  creatorUserId Int
  tipoGastoId   Int
  tipoGasto     TiposGastos @relation(fields: [tipoGastoId], references: [id])
  caja          Cajas       @relation(fields: [cajaId], references: [id])
  creatorUser   Usuarios    @relation(fields: [creatorUserId], references: [id])
}

model CajasVentas {
  id            Int      @id @default(autoincrement())
  activo        Boolean? @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cajaId        Int
  ventaId       Int
  creatorUserId Int
  venta         Ventas   @relation(fields: [ventaId], references: [id])
  caja          Cajas    @relation(fields: [cajaId], references: [id])
  creatorUser   Usuarios @relation(fields: [creatorUserId], references: [id])
}

model Clientes {
  id                  Int        @id @default(autoincrement())
  descripcion         String     @unique @db.VarChar(150)
  tipo_identificacion String     @db.VarChar(100)
  identificacion      String     @db.VarChar(100)
  telefono            String?    @default("") @db.VarChar(100)
  domicilio           String?    @default("") @db.VarChar(150)
  activo              Boolean?   @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  creatorUserId       Int
  creatorUser         Usuarios   @relation(fields: [creatorUserId], references: [id])
  reservas            Reservas[]
}

model Proveedores {
  id                  Int        @id @default(autoincrement())
  descripcion         String     @unique @db.VarChar(150)
  tipo_identificacion String     @db.VarChar(100)
  identificacion      String     @db.VarChar(100)
  telefono            String?    @default("") @db.VarChar(100)
  domicilio           String?    @default("") @db.VarChar(150)
  activo              Boolean?   @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  ingresos            Ingresos[]
  creatorUserId       Int
  creatorUser         Usuarios   @relation(fields: [creatorUserId], references: [id])
}

// Configuraciones generales

model ConfigGenerales {
  id             Int      @id @default(autoincrement())
  formatoBalanza String?  @default("iipppppeeeeef")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creatorUserId  Int
  creatorUser    Usuarios @relation(fields: [creatorUserId], references: [id])
}

// Reservas

model Reservas {
  id                Int                 @id @default(autoincrement())
  clienteId         Int
  usuarioCreador    String
  fechaReserva      DateTime
  fechaEntrega      DateTime
  fechaAlerta       DateTime
  horasAntes        String
  horaEntrega       String              @db.VarChar(10)
  fechaFinalizacion DateTime?           @default(now())
  adelanto          Float
  precioTotal       Float
  tipoObservacion   String?             @default("General") @db.VarChar(150)
  observaciones     String?             @default("") @db.VarChar(150)
  tortaRelleno1     String
  tortaRelleno2     String?             @default("") @db.VarChar(150)
  tortaRelleno3     String?             @default("") @db.VarChar(150)
  tortaCobertura    String?             @default("") @db.VarChar(150)
  tortaPeso         Float
  tortaForma        String?             @default("") @db.VarChar(150)
  tortaDetalles     String?             @default("") @db.VarChar(150)
  estado            String?             @default("Pendiente") @db.VarChar(150)
  activo            Boolean?            @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  creatorUserId     Int
  ventasReservas    VentasReservas[]
  reservasProductos ReservasProductos[]
  creatorUser       Usuarios            @relation(fields: [creatorUserId], references: [id])
  cliente           Clientes            @relation(fields: [clienteId], references: [id])
}

model ReservasProductos {
  id             Int       @id @default(autoincrement())
  productoId     Int
  producto       Productos @relation(fields: [productoId], references: [id])
  reservaId      Int
  reserva        Reservas  @relation(fields: [reservaId], references: [id])
  cantidad       Float
  precioTotal    Float
  precioUnitario Float
  activo         Boolean?  @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  creatorUserId  Int
  creatorUser    Usuarios  @relation(fields: [creatorUserId], references: [id])
}

model VentasReservas {
  id            Int      @id @default(autoincrement())
  ventaId       Int
  venta         Ventas   @relation(fields: [ventaId], references: [id])
  reservaId     Int
  reserva       Reservas @relation(fields: [reservaId], references: [id])
  tipo          String   @default("Adelanto") @db.VarChar(150)
  activo        Boolean? @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creatorUserId Int
  creatorUser   Usuarios @relation(fields: [creatorUserId], references: [id])
}
